describe('QA Metrics Charts', () => {
  let creds;

  before(() => {
    cy.fixture('credentials').then((data) => {
      creds = data;
    });
  });

  it('should visit example page and interact with qa metrics', () => {
    cy.viewport(1351, 462);
    cy.visit(creds.baseUrl);

    // Login
    cy.get("#login_form > div:nth-of-type(1) input").type(creds.username);
    cy.get("#login_form > div:nth-of-type(2) input").type(creds.password);
    cy.get("#loginBtn").click();

    // Login Success
    cy.log('Success Login');
    cy.get("li:nth-of-type(2) img").click();

    cy.log('Navigate to the Flow Metrics');

    cy.get('header.sidebar-header', { timeout: 10000 }).should('be.visible');

    // Opening the Navigation
    cy.get('header.sidebar-header')
      .invoke('removeClass', 'collapsed')
      .invoke('addClass', 'expanded');

    // Select the DevopsInsights flow metrics pages
    cy.get("div.top_Header span").click();

    // Click on the first timeline link
    cy.get("div.connected-timeline > div:nth-of-type(2) a", { timeout: 10000 })
      .should('be.visible')
      .click();

    cy.get('.echarts-for-react')
      .should('have.length.at.least', 1)
      .first()
      .find('canvas')
      .should('be.visible')
      .and(($canvas) => {
        expect($canvas.width()).to.be.greaterThan(0);
        expect($canvas.height()).to.be.greaterThan(0);
      });

    cy.wait(3000);

    cy.fixture('DIFilters').then((data) => {
      cy.get("svg").click();
      cy.get("#root button").click();
      cy.get("span:nth-of-type(2) div.select-value").click();
      cy.get("li.selectAllOptionClass > span").click();

      cy.get('input[placeholder="Start Date/End Date"]')
        .should('be.visible')
        .clear()
        .type(`${data.date}{enter}`);

      cy.get("#root button").click();

      cy.wait(6000);
      cy.screenshot('qa-metrics-chart');
    });
  });
});


describe('QA Metrics Main dashboard data output Tests', () => {
  let creds;

  const commonHeaders = {
    Accept: 'application/json',
    'Accept-Language': 'en-US,en;q=0.9,ml;q=0.8',
    Connection: 'keep-alive',
    'Content-Type': 'application/json',
    DNT: '1',
    'DTOP-API-TOKEN': 'fkO9eqvBkAwC2jLDsMY9L7Cnm9TGJEsXDudllrWLfFI=',
    Origin: 'https://sit.exora.devopslabs.tech',
    Referer: 'https://sit.exora.devopslabs.tech/DevOpsInsights/QAMetrics',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin'
  };

  const requestBodyWithDateRange = {
    projects: ['Architecture Compliance', 'C Advisor360'],
    sprints: [],
    issueTypes: [],
    priorities: [],
    status: [],
    assignee: [],
    reporter: [],
    fromDate: 1746037800,
    toDate: 1748405554.383
  };

  before(() => {
    cy.fixture('credentials').then((data) => {
      creds = data;
    });
  });

  it('Gets Tickets Verified and Bugs Created Trend Chart', () => {
    cy.request({
      method: 'POST',
      url: `${creds.baseUrl.replace('/auth', '')}/backend/api/v1/QAMetrics/getTicketsVerifiedAndBugCreatedTrendChart`,
      headers: commonHeaders,
      body: requestBodyWithDateRange
    }).then((response) => {
      expect(response.status).to.eq(200);
      cy.writeFile('cypress/reports/QA_ticketsVerifiedAndBugs.json', response.body);
    });
  });

  it('Fetches Tickets Created on Current Day', () => {
    cy.request({
      method: 'POST',
      url: `${creds.baseUrl.replace('/auth', '')}/backend/api/v1/QAMetrics/getTicketsCreatedOnCurrentDay`,
      headers: commonHeaders,
      body: {
        projects: ['Architecture Compliance', 'C Advisor360'],
        sprints: [],
        issueTypes: [],
        priorities: [],
        status: [],
        assignee: [],
        reporter: []
      }
    }).then((response) => {
      expect(response.status).to.eq(200);
      cy.writeFile('cypress/reports/QA_ticketsCreatedOnCurrentDay.json', response.body);
    });
  });

  it('Fetches Bugs Created by Severity on Current Day', () => {
    cy.request({
      method: 'POST',
      url: `${creds.baseUrl.replace('/auth', '')}/backend/api/v1/QAMetrics/getBugsCreatedSeverityOnCurrentDay`,
      headers: commonHeaders,
      body: {
        projects: ['Architecture Compliance', 'C Advisor360'],
        sprints: [],
        issueTypes: [],
        priorities: [],
        status: [],
        assignee: [],
        reporter: []
      }
    }).then((response) => {
      expect(response.status).to.eq(200);
      cy.writeFile('cypress/reports/QA_todayBugsCratedBySeverity.json', response.body);
    });
  });

  it('Gets Bugs Created by Severity in Given Date Range', () => {
    cy.request({
      method: 'POST',
      url: `${creds.baseUrl.replace('/auth', '')}/backend/api/v1/QAMetrics/getBugsCreatedSeverityOnGivenDateRange`,
      headers: commonHeaders,
      body: requestBodyWithDateRange
    }).then((response) => {
      expect(response.status).to.eq(200);
      cy.writeFile('cypress/reports/QA_bugsCratedBySeverity.json', response.body);
    });
  });

  it('Gets Tickets Verified in Given Date Range', () => {
    cy.request({
      method: 'POST',
      url: `${creds.baseUrl.replace('/auth', '')}/backend/api/v1/QAMetrics/getTicketsVerifiedOnGivenDateRange`,
      headers: commonHeaders,
      body: requestBodyWithDateRange
    }).then((response) => {
      expect(response.status).to.eq(200);
      cy.writeFile('cypress/reports/QA_verifiedTicketDate.json', response.body);
    });
  });
});
